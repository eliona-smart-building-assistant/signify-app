/*
 * Signify app API
 *
 * API to access and configure the signify app
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package apiserver

// Configuration - Each configuration defines access to provider's API.
type Configuration struct {

	// Internal identifier for the configured API (created automatically).
	Id *int64 `json:"id,omitempty"`

	// Base URL connecting signify cloud
	BaseUrl string `json:"baseUrl,omitempty"`

	// Service connecting signify cloud
	Service string `json:"service,omitempty"`

	// Service ID connecting signify cloud
	ServiceId string `json:"serviceId,omitempty"`

	// Service secret connecting signify cloud
	ServiceSecret string `json:"serviceSecret,omitempty"`

	// App key connecting signify cloud
	AppKey string `json:"appKey,omitempty"`

	// App secret connecting signify cloud
	AppSecret string `json:"appSecret,omitempty"`

	// Flag to enable or disable fetching from this API
	Enable *bool `json:"enable,omitempty"`

	// Interval in seconds for collecting data from API
	RefreshInterval int32 `json:"refreshInterval,omitempty"`

	// Timeout in seconds
	RequestTimeout *int32 `json:"requestTimeout,omitempty"`

	// Array of rules combined by logical OR
	AssetFilter [][]FilterRule `json:"assetFilter,omitempty"`

	// Set to `true` by the app when running and to `false` when app is stopped
	Active *bool `json:"active,omitempty"`

	// List of Eliona project ids for which this device should collect data. For each project id all smart devices are automatically created as an asset in Eliona. The mapping between Eliona is stored as an asset mapping in the signify app.
	ProjectIDs *[]string `json:"projectIDs,omitempty"`

	// ID of the last Eliona user who created or updated the configuration
	UserId *string `json:"userId,omitempty"`
}

// AssertConfigurationRequired checks if the required fields are not zero-ed
func AssertConfigurationRequired(obj Configuration) error {
	if err := AssertRecurseInterfaceRequired(obj.AssetFilter, AssertFilterRuleRequired); err != nil {
		return err
	}
	return nil
}

// AssertConfigurationConstraints checks if the values respects the defined constraints
func AssertConfigurationConstraints(obj Configuration) error {
	return nil
}
